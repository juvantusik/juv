Реализуйте и экспортируйте по умолчанию функцию addDigits, которая работает следующим образом:

Дано неотрицательное целое число num. Складывать все входящие в него цифры до тех пор, пока не останется одна цифра.

Для числа 38 процесс будет выглядеть так:

3 + 8 = 11
1 + 1 = 2
Результат: 2

Пример:

addDigits(10); // 1
addDigits(19); // 1
addDigits(38); // 2
addDigits(1259); // 8
Подсказка
Выделите процесс суммирования цифр в числе в отдельную функцию

import { length } from './strings';

// BEGIN (write your solution here)
const sumofnum = (num) => {            // создает процесс суммирования в виде функции
  const str = String(num); // обозначаем вводимый числовой аргумент, как строку, чтобы можно было посчитать его длинну
  let result = 0;  // начальное значение - 0
  for (let count = 0; count < length(str); count += 1) { // счетчик. Если цифра - 21, то 2 это нулевой индекс, 1 - первый индекс
    result += Number(str[count]); // результатом будет сложение результата (0 изначально) и преобразованной строки в ЧИСЛО. Т.е. будет результат 21, но тут до сих пор 2 цифры, тепреь надо создать другую функцию
  // Объект Number является объектом-обёрткой, позволяющей вам работать с числовыми значениями. Объект Number создаётся через конструктор Number().
  }
  return result;
};
const addDigits = (num) => {  // функция проверяющая кол-во символов в result, и выполняющая сложение этих цифр, используя предыдущую функцию
  let result = num; // за результат берем переданный аргумент, например 21
  while (result >= 10) {  // 21 больше 10 (именно 10 т.к. это крайнее двузначное число) и пока переданный аргумент больше 10, выполнять следующее действие
    result = sumofnum(result); // result = вызов первой функции, которая складывает числа
  }
  return result;
};

export default addDigits;
// END
